<?php

/*
  Thanks for downloading this script, it wasn't purely I made it by myself
  Most of the code was generated by ChatGPT so thanks to the AI for making this kinda `Slot Game`
  I just want to make sure that you're not using this code as a real Gambling
  So do I, I'm just using this as an entertain for myself
  So please, do with your own risk. okay?
*/

class SlotGame {
    private $balance = 100000; // You can use some txt file for saving your money, I'm using IDR for this btw
    private $minBet = 200; // You can set as much as you want but I prefer this tho
    private $symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', '#']; // Replace with your symbols
    private $symbolProbabilities = [10, 12, 14, 16, 14, 12, 10, 12, 14, 16, 0]; // Adjust the percentages as needed
    private $scatterSymbol = '#'; // Replace with your scatter symbol
    private $spinCount = 0; // Spin counter
    private $scatterCount = 0; // Scatter counter
    private $grid = []; // Represents the 5x6 grid
    private $freeSpins = 0; // Track free spins
    private $freeSpinMultiplier = 1; // Multiplier for free spins (initially 1x)
    private $symbolCounters = []; // Array to store symbol counts

    public function __construct() {
        $this->initializeGrid();
        $this->initializeSymbolCounters();
    }

    public function start() {
        $this->clear();
        echo "Welcome to the NG99 Slot!\n";
        
        while ($this->balance >= $this->minBet) {
            $this->displayMenu();
            $choice = readline("Enter your choice: ");
            
            switch ($choice) {
                case 1:
                    $this->manualSpin();
                    break;
                case 2:
                    $this->autoSpin();
                    break;
                case 3:
                    $this->buyScatter();
                    break;
                case 4:
                    $this->quit();
                    break;
                default:
                    echo "Invalid choice. Please try again.\n";
                    break;
            }
        }
        
        echo "Your balance is too low to play. Goodbye!\n";
    }

    private function clear() {
        return print(chr(27) . chr(91) . 'H' . chr(27) . chr(91) . 'J'."\n"); //^[H^[J
    }

    private function initializeGrid() {
        // Create an array with symbols based on their probabilities
        $symbolPool = [];
        foreach ($this->symbols as $index => $symbol) {
            $symbolPool = array_merge($symbolPool, array_fill(0, $this->symbolProbabilities[$index], $symbol));
        }

        // Shuffle the symbol pool to randomize the distribution
        shuffle($symbolPool);

        // Initialize the grid with shuffled symbols
        for ($row = 0; $row < 6; $row++) {
            $this->grid[$row] = [];
            for ($col = 0; $col < 5; $col++) {
                $this->grid[$row][$col] = array_shift($symbolPool);
            }
        }
    }

   private function initializeSymbolCounters() {
        // Initialize symbol counters
        foreach ($this->symbols as $symbol) {
            $this->symbolCounters[$symbol] = 0;
        }
    }

    private function updateSymbolCounters($result) {
        // Update symbol counters based on the symbols in the result
        foreach ($result as $row) {
            foreach ($row as $symbol) {
                $this->symbolCounters[$symbol]++;
            }
        }
    }

    private function weightedRandomIndex($weights) {
        // Generate a random value within the sum of weights
        $randValue = mt_rand(1, array_sum($weights));

        // Find the corresponding index based on the random value and weights
        $total = 0;
        for ($i = 0; $i < count($weights); $i++) {
            $total += $weights[$i];
            if ($randValue <= $total) {
                return $i;
            }
        }

        // Default to the last index if something goes wrong
        return count($weights) - 1;
    }
    
    private function displayMenu() {
        echo "Kredit: ".$this->balance."\n";
        echo "Menu:\n";
        echo "1. Manual Spin\n";
        echo "2. Auto Spin\n";
        echo "3. Buy Scatter (Rp 20000)\n";
        echo "4. Quit\n";
    }
    
    private function manualSpin() {
        $betAmount = readline("Enter your bet amount: ");
        $this->clear();

        if ($this->isValidBet($betAmount)) {
            getAnotherSpinManual:
            echo "Your balance: Rp " . ($this->balance - $betAmount) . "\n";

            // Initialize a counter for consecutive symbol matches
            $consecutiveMatches = 0;

            while (true) {
                // Calculate the probability of winning free spins based on the bet amount
                $probability = min(10, $betAmount / $this->minBet); // Adjust the factor as needed

                $result = $this->spinReels();
                $this->displayResult($result);

                // Check if consecutive symbols are the same
                if ($this->checkConsecutiveSymbols($result)) {
                    // Increment the consecutiveMatches counter
                    $consecutiveMatches++;

                    // Calculate the win amount based on the result and bet amount
                    $winAmount = $this->calculateWin($result, $betAmount);
                    
                    // Modify balance with the win amount
                    $this->balance += $winAmount;
                    
                    echo "KEMENANGAN Rp $winAmount.\n";
                    echo "Putaran " . $consecutiveMatches . "x\n";
                    sleep(1); // Sleep for 1 second (adjust as needed)
                    $this->clear();

                    if ($winAmount == 0) {
                        break;
                    }
                } else {
                    // If no consecutive match, break out of the loop
                    break;
                }
            }

            // Charge the bet amount
            $this->updateBalance($betAmount, $result);

            // Update symbol counters after each spin
            $this->updateSymbolCounters($result);

            echo "Press Enter to spin again.\n";
        } else {
            echo "Invalid bet amount. Please try again.\n";
        }

        readline();
        $this->clear();
    }

    private function autoSpin() {
        $betAmount = readline("Enter your bet amount: ");
        $numSpins = readline("Enter the number of spins: ");
        $this->clear();

        if ($this->isValidBet($betAmount)) {
            for ($spin = 0; $spin < $numSpins; $spin++) {

                // Initialize a counter for consecutive symbol matches
                $consecutiveMatches = 0;

                while (true) {
                    echo "Spin left " . ($numSpins - $spin) . "...\n";
                    echo "KREDIT: Rp " . ($this->balance - $betAmount) . "\n";
                    // Calculate the probability of winning free spins based on the bet amount
                    $probability = min(10, $betAmount / $this->minBet); // Adjust the factor as needed

                    $result = $this->spinReels();
                    $this->displayResult($result);

                    // Check if consecutive symbols are the same
                    if ($this->checkConsecutiveSymbols($result)) {
                        // Increment the consecutiveMatches counter
                        $consecutiveMatches++;

                        // Calculate the win amount based on the result and bet amount
                        $winAmount = $this->calculateWin($result, $betAmount);

                        // Modify balance with the win amount
                        $this->balance += $winAmount;

                        echo "KEMENANGAN Rp $winAmount.\n";
                        echo "Putaran " . $consecutiveMatches . "x\n";
                        sleep(1); // Sleep for 1 second (adjust as needed)
                        $this->clear();

                        if ($winAmount == 0) {
                            break;
                        }

                    } else {
                        // If no consecutive match, break out of the loop
                        break;
                    }
                }

                // Charge the bet amount
                $this->updateBalance($betAmount, $result);

                if ($this->balance < $this->minBet) {
                    echo "Your balance is too low to continue auto spins.\n";
                    break;
                }

                sleep(1); // Sleep for 1 second (adjust as needed)
                $this->clear();
            }

            echo "Auto spins completed.\n";
        } else {
            echo "Invalid bet amount. Please try again.\n";
        }

        readline();
        $this->clear();
    }
        
    private function checkConsecutiveSymbols($result) {
        // Function to check for consecutive symbols in a given row, column, or diagonal
        $checkConsecutive = function ($symbols) {
            $consecutiveCount = 1;
            $prevSymbol = null;

            foreach ($symbols as $symbol) {
                if ($symbol === $prevSymbol && $symbol !== '#') {
                    $consecutiveCount++;

                    // If there are more than or equal to 5 consecutive symbols, it's a win
                    if ($consecutiveCount >= 5) {
                        return true;
                    }
                } else {
                    $consecutiveCount = 1;
                }

                $prevSymbol = $symbol;
            }

            return false;
        };

        // Check for consecutive symbols in rows
        for ($row = 0; $row < 6; $row++) {
            if ($checkConsecutive($result[$row])) {
                return true;
            }
        }

        // Check for consecutive symbols in columns
        for ($col = 0; $col < 5; $col++) {
            $columnSymbols = [];
            for ($row = 0; $row < 6; $row++) {
                $columnSymbols[] = $result[$row][$col];
            }

            if ($checkConsecutive($columnSymbols)) {
                return true;
            }
        }

        // Check for consecutive symbols in diagonals (down-right)
        for ($row = 0; $row < 6; $row++) {
            $diagonalSymbols = [];
            for ($i = 0; $i < 5 && ($row + $i) < 6; $i++) {
                $diagonalSymbols[] = $result[$row + $i][$i];
            }

            if ($checkConsecutive($diagonalSymbols)) {
                return true;
            }
        }

        for ($col = 1; $col < 5; $col++) {
            $diagonalSymbols = [];
            for ($i = 0; $i < 5 && ($col + $i) < 5 && ($i + 1) < 6; $i++) {
                $diagonalSymbols[] = $result[$i][$col + $i];
            }

            if ($checkConsecutive($diagonalSymbols)) {
                return true;
            }
        }

        // Check for consecutive symbols in diagonals (down-left)
        for ($row = 0; $row < 6; $row++) {
            $diagonalSymbols = [];
            for ($i = 0; $i < 5 && ($row + $i) < 6; $i++) {
                $diagonalSymbols[] = $result[$row + $i][4 - $i];
            }

            if ($checkConsecutive($diagonalSymbols)) {
                return true;
            }
        }

        for ($col = 3; $col >= 0; $col--) {
            $diagonalSymbols = [];
            for ($i = 0; $i < 5 && ($col - $i) >= 0 && ($i + 1) < 6; $i++) {
                $diagonalSymbols[] = $result[$i][$col - $i];
            }

            if ($checkConsecutive($diagonalSymbols)) {
                return true;
            }
        }

        return false;
    }


    private function awardFreeSpins() {
        // Award free spins
        $freeSpinsAwarded = mt_rand(0, 100) < 5 ? 10 : 0; // 5% chance of 10 free spins
        if ($freeSpinsAwarded > 0) {
            $this->freeSpins += $freeSpinsAwarded;
            echo "Congratulations! You've won $freeSpinsAwarded free spins.\n";
        }
    }
    
    private function isValidBet($betAmount) {
        return is_numeric($betAmount) && $betAmount >= $this->minBet && $betAmount <= $this->balance / 2;
    }
    
    private function spinReels() {
        // Simulate spinning the reels by updating the grid
        for ($row = 0; $row < 6; $row++) {
            for ($col = 0; $col < 5; $col++) {
                $randomNumber = mt_rand(1, 100);
                $symbolIndex = 0;

                // Determine the symbol based on probabilities
                /*
                    foreach ($this->symbolProbabilities as $index => $probability) {
                        if ($randomNumber <= $probability) {
                            $symbolIndex = $this->weightedRandomIndex($this->symbolProbabilities);
                            break;
                        }
                    }
                */
                $symbolIndex = $this->weightedRandomIndex($this->symbolProbabilities);
                $this->grid[$row][$col] = $this->symbols[$symbolIndex];
            }
        }
        return $this->grid;
    }
    
    private function displayResult($grid, $highlightedSymbols = []) {
        // Initialize a 2D array to keep track of which symbols to highlight
        $highlightGrid = [];
        for ($row = 0; $row < 6; $row++) {
            $highlightGrid[$row] = array_fill(0, 5, false);
        }

        // Function to mark consecutive symbols in a given row, column, or diagonal
        $markConsecutive = function ($symbols, &$highlightGrid) {
            $consecutiveCount = 1;
            $prevSymbol = null;

            foreach ($symbols as $col => $symbol) {
                if ($symbol === $prevSymbol && $symbol !== '#') {
                    $consecutiveCount++;
                    if ($consecutiveCount >= 3) {
                        // Mark consecutive symbols for highlighting
                        for ($i = $col; $i > $col - $consecutiveCount; $i--) {
                            $highlightGrid[$col][$i] = true;
                        }
                    }
                } else {
                    $consecutiveCount = 1;
                }

                $prevSymbol = $symbol;
            }
        };

        // Mark consecutive symbols in rows
        for ($row = 0; $row < 6; $row++) {
            $markConsecutive($grid[$row], $highlightGrid[$row]);
        }

        // Mark consecutive symbols in columns
        for ($col = 0; $col < 5; $col++) {
            $columnSymbols = [];
            for ($row = 0; $row < 6; $row++) {
                $columnSymbols[] = $grid[$row][$col];
            }
            $markConsecutive($columnSymbols, $highlightGrid);
        }

        // Display the 5x6 grid with highlighting
        for ($row = 0; $row < 6; $row++) {
            $displayRow = [];
            for ($col = 0; $col < 5; $col++) {
                $symbol = $grid[$row][$col];

                // Add ANSI escape codes for highlighting
                if (in_array($symbol, $highlightedSymbols) || $highlightGrid[$row][$col]) {
                    $symbol = "\033[1;37;42m $symbol \033[0m"; // Highlight in white on red background
                } else {
                    $symbol = "\033[1;37;40m $symbol \033[0m"; // Highlight in white on green background
                }

                $displayRow[] = $symbol;
            }
            echo implode(' - ', $displayRow) . "\n";
            usleep(100000);
        }
    }

    private function calculateWin($result, $betAmount) {
        $winAmount = 0;

        // Adjusted points for each symbol
        $pointsTable = [
            'A' => 10,
            'B' => 20,
            'C' => 30,
            'D' => 40,
            'E' => 50,
            'F' => 60,
            'G' => 70,
            'H' => 80,
            'I' => 90,
            'J' => 100,
            '#' => 1000 // Scatter symbol
        ];

        // Calculate the multiplier based on the bet amount
        $multiplier = 1;
        if ($betAmount >= 100) {
            $multiplier = 2; // Double the win for bets >= 100
        } else if ($betAmount >= 1000) {
            $multiplier = 20; // Double the win for bets >= 100
        }

        // Define the symbols from 'A' to 'J' that you want to check for consecutive wins
        $symbolsToCheck = range('A', 'J');

        foreach ($symbolsToCheck as $symbolToCheck) {
            // Check for matching symbols in rows
            for ($row = 0; $row < 6; $row++) {
                $count = 0; // Counter for consecutive symbols
                for ($col = 0; $col < 5; $col++) {
                    $symbol = $result[$row][$col];
                    if ($symbol === $symbolToCheck) {
                        $count++;
                        if ($count >= 3) {
                            // At least 3 consecutive symbols in a row, award a win
                            $winAmount += $pointsTable[$symbolToCheck] * $count * $multiplier;
                        }
                    } else {
                        $count = 0; // Reset the counter if a different symbol is encountered
                    }
                }
            }

            // Check for matching symbols in columns
            for ($col = 0; $col < 5; $col++) {
                $count = 0; // Counter for consecutive symbols
                for ($row = 0; $row < 6; $row++) {
                    $symbol = $result[$row][$col];
                    if ($symbol === $symbolToCheck) {
                        $count++;
                        if ($count >= 3) {
                            // At least 3 consecutive symbols in a column, award a win
                            $winAmount += $pointsTable[$symbolToCheck] * $count * $multiplier;
                        }
                    } else {
                        $count = 0; // Reset the counter if a different symbol is encountered
                    }
                }
            }
        }

        return $winAmount;
    }

    private function checkScatterWins($result) {
        $scatterCount = 0;
        foreach ($result as $row) {
            foreach ($row as $symbol) {
                if ($symbol === $this->scatterSymbol) {
                    $scatterCount++;
                }
            }
        }

        // Make it easier to get scatter (adjust as needed)
        if ($scatterCount >= 2) {
            // Award free spins
            $freeSpinsAwarded = mt_rand(0, 100) < 20 ? 10 : 0; // 20% chance of 10 free spins
            if ($freeSpinsAwarded > 0) {
                $this->freeSpins += $freeSpinsAwarded;
                echo "Congratulations! You've won $freeSpinsAwarded free spins.\n";
            }
        }

        return 0;
    }

    private function buyScatter() {
        $this->clear();
        // Allow the player to buy the scatter symbol for Rp 5000
        if ($this->balance >= 20000) {
            $this->scatterSymbol = '#';
            $this->balance -= 20000;
            echo "You've purchased the scatter symbol for Rp 5000.\n";
            echo "Press Enter to start your 10 free spins.\n";
            readline(); // Wait for Enter key press
            $this->clear();

            // Start 10 free spins
            $freeSpinWinnings = 0; // Track winnings during free spins
            for ($i = 0; $i < 10; $i++) {
                echo "Sisa putaran gratis " . (10 - $i) . "...\n";
                $result = $this->spinReels();
                $this->displayResult($result);
                $winAmount = $this->calculateWin($result, $this->minBet);
                $freeSpinWinnings += $winAmount;
                echo "KEMENANGAN Spin Gratis: Rp " . $winAmount . "\n";
                sleep(1);
                $this->clear();
            }

            $this->balance += $freeSpinWinnings;
            echo "Free spins completed.\n";
            echo "You've won Rp " . $freeSpinWinnings . " during free spins!\n";
        } else {
            echo "You don't have enough balance to buy the scatter symbol.\n";
        }
    }

    private function updateBalance($betAmount, $result) {
        if ($this->freeSpins === 0) {
            // Deduct bet amount if not in a free spin
            $this->balance -= $betAmount;
        }

        $winAmount = $this->calculateWin($result, $betAmount);

        // Add winnings
        if ($this->freeSpins === 0) {
            // Add winnings to balance if not in a free spin
            $this->balance += $winAmount;
            echo "KEMENANGAN: Rp " . $winAmount . "\n";
            echo "KREDIT SEKARANG: Rp " . $this->balance . "\n";
        }

        // Check for free spins
        while ($this->freeSpins > 0) {
            echo "You have $this->freeSpins free spins remaining.\n";
            $this->freeSpins--;

            // Increase the free spin multiplier (adjust as needed)
            $this->freeSpinMultiplier = $this->getFreeSpinMultiplier();

            // Spin during free spins
            echo "Spinning during free spin (Multiplier: x$this->freeSpinMultiplier)...\n";
            $result = $this->spinReels();
            $this->displayResult($result);
            $winAmount = $this->calculateWin($result, $this->minBet);
            $this->balance += $winAmount * $this->freeSpinMultiplier;
            echo "KEMENANGAN Spin Gratis: Rp " . ($winAmount * $this->freeSpinMultiplier) . "\n";
            echo "Your balance Now: Rp " . $this->balance . "\n";
            sleep(1);
            $this->clear();
        }
    }

    private function quit() {
        echo "Thank you for playing! Your final balance: Rp " . $this->balance . "\n";
        exit();
    }

    private function getFreeSpinMultiplier() {
        // Generate a random multiplier for free spins (adjust as needed)
        $multiplierOptions = [2, 5, 10, 20, 25];
        return $multiplierOptions[array_rand($multiplierOptions)];
    }
}

$game = new SlotGame();
$game->start();
?>
